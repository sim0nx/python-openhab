[build-system]
requires = ["setuptools>=68", "setuptools_scm[toml]>=7.1"]
build-backend = "setuptools.build_meta"

[project]
name = "python-openhab"
description = "python library for accessing the openHAB REST API"
authors = [{ name = "Georges Toth", email = "georges@trypill.org" }]
license = { text = "AGPLv3+" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
keywords = ["openHAB"]
requires-python = ">=3.8"
dependencies = [
    "python-dateutil~=2.8",
    "pydantic<3",
    "Authlib~=1.2",
    "httpx~=0.24",
]
dynamic = ["version"]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/sim0nx/python-openhab"
Download = "https://github.com/sim0nx/python-openhab"
Tracker = "https://github.com/sim0nx/python-openhab/issues"
Documentation = "http://python-openhab.readthedocs.io/en/latest/?badge=latest"
Source = "https://github.com/sim0nx/python-openhab"

[project.optional-dependencies]
docs = [
    "mkdocs-material",
    "mkdocstrings[crystal,python]",
]
dev = [
    "mypy",
    "ruff",
    "types-python-dateutil",
    "typeguard",
]
test = [
    "pytest",
    "pytest-sugar",
    "coverage",
    "beautifulsoup4",
]

[tool.setuptools_scm]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages]
find = { namespaces = false }

[tool.setuptools.package-data]
openhab = ["py.typed"]

[tool.mypy]
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_calls = false
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_optional = true
check_untyped_defs = false

[tool.ruff]
line-length = 160
indent-width = 2
target-version = "py38"

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "D", # pydocstyle
    "N", # pep8-naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "EM103", # flake8-errmsg - dot-format-in-exception
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    #    "SIM",  # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "TD", # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PL", # Pylint
    "PLC", # Convention
    "PLE", # Error
    "PLR", # Refactor
    "PLW", # Warning
    "B904", # reraise-no-cause
    "FLY", # flynt
    #    "PERF",  # Perflint
    "RUF013", # implicit-optional
]
unfixable = ['ERA001']
extend-select = ['Q', 'RUF100', 'C90']
flake8-quotes = { inline-quotes = 'single', multiline-quotes = 'single' }
ignore = [
    "C901", # too complex
    "E501", # line too long
    "B008", # do not perform function call in argument defaults
    "ANN101", # missing-type-self
    "ANN401", # any-type
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ANN102", # missing-type-cls
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLW0603", # Using the global statement
    "PLR0912", # Too many branches
    "COM812", # missing-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
    "Q001", # bad-quotes-multiline-string
]


[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.pydocstyle]
convention = "google"
